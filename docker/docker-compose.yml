version: "3.8"

services:
  master:
    image: postgres:17
    container_name: pg_master
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--data-checksums
    ports:
      - "5435:5432"
    volumes:
      - pg_master_data:/var/lib/postgresql/data
      - ./init-master.sql:/docker-entrypoint-initdb.d/01_master_init.sql
    command: >
      postgres
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby=on
      -c hba_file=/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-docker-network

  phys_replica:
    image: postgres:17
    container_name: pg_phys_replica
    volumes:
      - pg_phys_replica_data:/var/lib/postgresql/data
    restart: unless-stopped
    environment:
      PGUSER: ${REPLICATOR_USER}
      PGPASSWORD: ${REPLICATOR_PASS}
    depends_on:
      master:
        condition: service_healthy
    ports:
      - "5433:5432"
    command: >
      bash -c "
        rm -rf $$PGDATA/*;
        chmod 700 $$PGDATA;
        until gosu postgres pg_basebackup -h master -p 5432 -D $$PGDATA -U replicator -R -X stream; do
          echo 'waiting for master...'; sleep 2;
        done;
        echo \"primary_conninfo='host=master port=5432 user=replicator password=replicator_pass'\" >> $$PGDATA/postgresql.conf;
        echo \"primary_slot_name='phys_slot'\" >> $$PGDATA/postgresql.conf;
        exec gosu postgres postgres -c hot_standby=on
      "

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - my-docker-network

  logic_replica:
    image: postgres:17
    container_name: pg_logic_replica
    restart: unless-stopped
    volumes:
     - pg_logic_replica_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${REPLICATOR_USER}
      PGPASSWORD: ${REPLICATOR_PASS}
    depends_on:
      master:
        condition: service_healthy
    ports:
      - "5434:5432"
    command: >
      bash -c "
        chmod 700 /var/lib/postgresql/data;
        until gosu postgres pg_basebackup -h master -p 5432 -D /var/lib/postgresql/data -U replicator -X stream; do
          echo 'waiting for master...'; sleep 2;
        done;
        gosu postgres postgres &
        until gosu postgres pg_isready -U postgres; do
          echo 'waiting for server to start...'; sleep 2;
        done;
        gosu postgres psql -c \"CREATE SUBSCRIPTION logic_sub CONNECTION 'host=master port=5432 user=replicator password=replicator_pass' PUBLICATION my_publication WITH (copy_data = false);\"
        wait $!
      "

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - my-docker-network

  loadgen:
    build:
      context: ..
    command: ["/loadgen", "-min-size", "100", "-max-size", "300"]
    ports:
      - "2112:2112"
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      master:
        condition: service_healthy
    networks:
      - my-docker-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      #- ./prometheus.yml/rules.pg.yml:/etc/prometheus/rules.pg.yml:ro
    ports:
      - "9090:9090"
    networks:
      - my-docker-network

  pg_exporter_master:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master:5432/${POSTGRES_DB}?sslmode=disable #TODO: SSL
    depends_on:
      master:
        condition: service_healthy
    networks:
      - my-docker-network

  pg_exporter_phys:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://${REPLICATOR_USER}:${REPLICATOR_PASS}@phys_replica:5432/${POSTGRES_DB}?sslmode=disable #TODO: SSL
    depends_on:
      phys_replica:
        condition: service_healthy
    networks:
      - my-docker-network

  pg_exporter_logic:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://${REPLICATOR_USER}:${REPLICATOR_PASS}@logic_replica:5432/${POSTGRES_DB}?sslmode=disable #TODO: SSL
    depends_on:
      logic_replica:
        condition: service_healthy
    networks:
      - my-docker-network

networks:
    my-docker-network:
      driver: bridge
      ipam:
        driver: default
        config:
          - subnet: "172.18.0.0/16"
volumes:
  pg_master_data:
  pg_phys_replica_data:
  pg_logic_replica_data: