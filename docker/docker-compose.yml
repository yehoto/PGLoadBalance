# version: '3.8'
services:
  postgres-primary:
    image: postgres:16
    container_name: postgres-primary
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_super_secret_postgres_password

      REPLICATOR_USER: replicator
      REPLICATOR_PASSWORD: replicator_pass
    volumes:
      - primary_data:/var/lib/postgresql/data
      - ./init-primary.sh:/docker-entrypoint-initdb.d/init-primary.sh
    ports:
      - "5433:5432"
    networks:
      - postgres-replication
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"] 
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-replica:
    image: postgres:16
    container_name: postgres-replica
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      REPLICATOR_USER: replicator
      REPLICATOR_PASSWORD: replicator_pass
    volumes:
      - replica_data:/var/lib/postgresql/data
      - ./init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - "5434:5432"
    depends_on:
      - postgres-primary
    networks:
      - postgres-replication

  loadgen:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: loadgen
    command: ["/loadgen", "-min-size", "100", "-max-size", "300"]
    ports:
      - "2112:2112"
    environment:
      DSN: "postgres://replicator:replicator_pass@postgres-primary:5432/postgres?sslmode=disable"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - postgres-replication

  pg_exporter_master:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://replicator:replicator_pass@postgres-primary:5432/postgres?sslmode=disable"
    networks:
      - postgres-replication

  pg_exporter_replica:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://replicator:replicator_pass@postgres-replica:5432/postgres?sslmode=disable"
    networks:
      - postgres-replication

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml/prometheus.yml:/etc/prometheus/prometheus.yml:rw
    ports:
      - "9090:9090"
    networks:
      - postgres-replication

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - postgres-replication

volumes:
  primary_data:
  replica_data:
  grafana_data:

networks:
  postgres-replication:
    driver: bridge